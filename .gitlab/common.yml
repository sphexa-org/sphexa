# To run on dom cn:
# include:
#   - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.cscs.yml'

variables:
  JG_DEPS_PATH: ftp://ftp.cscs.ch/out/jgp/hpc/containers
  # export JG_DEPS_PATH='ftp://ftp.cscs.ch/out/jgp/hpc/containers'
  # PERSIST_IMAGE_NAME: sph-exa_gnu:1.0
  # base image built with gitlab-ci_deps.yml
  # https://art.cscs.ch:443/artifactory/contbuild/testing/anfink/sph-exa_base
  # docker login art.cscs.ch
  # docker pull art.cscs.ch/contbuild/testing/anfink/sph-exa_gnu:1.0
  # NOTE: see vars in https://gitlab.com/cscs-ci/gitlab-runner-slurm-sarus
# {{{ list of tests:
# TODO: /kernel/kernel_tests -> /usr/local/bin/kernel/kernel_tests

# .bin/sedov
# .bin/sedov-cuda
#
# .sbin/coord_samples/coordinate_test
# .sbin/integration_mpi/box_mpi
# .sbin/integration_mpi/domain_2ranks
# .sbin/integration_mpi/domain_nranks
# .sbin/integration_mpi/exchange_domain
# .sbin/integration_mpi/exchange_focus
# .sbin/integration_mpi/exchange_halos
# .sbin/integration_mpi/exchange_keys
# .sbin/integration_mpi/focus_tree
# .sbin/integration_mpi/globaloctree
# .sbin/integration_mpi/treedomain
# .sbin/performance/cudaNeighborsTest
# .sbin/performance/gravity_perf
# .sbin/performance/hilbert_perf
# .sbin/performance/hilbert_perf_gpu
# .sbin/performance/octree_perf
# .sbin/performance/octree_perf_gpu
# .sbin/performance/peers_perf
# .sbin/performance/scan_perf
# .sbin/unit/component_units
# .sbin/unit/component_units_omp
# .sbin/unit_cuda/component_units_cuda
# }}}

# {{{ deps:
# {{{ deps-cpe-gnu
.deps-cpe-gnu: &deps-cpe-gnu
  # tag must be 'docker_jfrog'
  tags:
    - docker_jfrog
  # stage: deps
  # image: nvidia/cuda:11.4.2-devel-ubuntu20.04
  before_script:
    - echo CI_PROJECT_DIR=$CI_PROJECT_DIR PWD=$PWD
    - module list
    - CC --version
    # - apt update > /dev/null
    # {{{ get deps:
    # - apt install -y --no-install-recommends wget file python3-pip unzip vim-tiny > /dev/null
    # - which wget
    - mkdir -p /usr/local/games
    - cd /usr/local/games
    - wget --quiet $JG_DEPS_PATH/c/CMake/cmake-3.22.1-linux-x86_64.tar.gz
    - wget --quiet $JG_DEPS_PATH/n/nvhpc/nvhpc-21.9-jg.tar.gz # NVHPC
    - wget --quiet $JG_DEPS_PATH/g/googletest/release-1.11.0.tar.gz
    # }}}
    # {{{ cmake:
    - cd /usr/local/games
    - tar xf /usr/local/games/cmake-3.22.1-linux-x86_64.tar.gz
    - mv cmake-3.22.1-linux-x86_64/share/* ../share/
    - mv cmake-3.22.1-linux-x86_64/bin/* ../bin/
    - rm -fr cmake-3.22.1-linux-x86_64 /usr/local/games/cmake-3.22.1-linux-x86_64.tar.gz
    - cd ../bin
    - rm -f ccmake cmake-gui cpack
    - cd $HOME
    - cmake --version
    # }}}
    # {{{ googletest:
    - cd /usr/local/games
    - tar xf /usr/local/games/release-1.11.0.tar.gz
    - rm -f /usr/local/games/release-1.11.0.tar.gz
    # }}}
    # {{{ nvhpc/21.9
    - cd /opt
    - tar xf /usr/local/games/nvhpc-21.9-jg.tar.gz # -> /opt/nvidia/Linux_x86_64/21.9
    - rm -f /usr/local/games/nvhpc-21.9-jg.tar.gz
    # }}}
    # {{{ reframe:
    - python3 -m pip install -U pip > /dev/null
    - python3 -m pip install setuptools requests ReFrame-HPC > /dev/null
    - reframe --version
    # }}}
# }}}
# {{{ deps-ubu-gnu
.deps-ubu-gnu: &deps-ubu-gnu
  # tag must be 'docker_jfrog'
  tags:
    - docker_jfrog
  # stage: deps
  # image: nvidia/cuda:11.4.2-devel-ubuntu20.04
  before_script:
    - echo CI_PROJECT_DIR=$CI_PROJECT_DIR PWD=$PWD
    - apt update > /dev/null
    # {{{ get deps:
    - apt install -y --no-install-recommends wget file python3-pip unzip vim-tiny > /dev/null
    - which wget
    - cd /usr/local/games
    - wget --quiet $JG_DEPS_PATH/c/CMake/cmake-3.22.1-linux-x86_64.tar.gz
    - wget --quiet $JG_DEPS_PATH/m/MPICH/mpich-3.1.4.tar.gz
    - wget --quiet $JG_DEPS_PATH/g/googletest/release-1.11.0.tar.gz
    # }}}
    # {{{ cmake:
    - cd /usr/local/games
    - tar xf /usr/local/games/cmake-3.22.1-linux-x86_64.tar.gz
    - mv cmake-3.22.1-linux-x86_64/share/* ../share/
    - mv cmake-3.22.1-linux-x86_64/bin/* ../bin/
    - rm -fr cmake-3.22.1-linux-x86_64
    - cd ../bin
    - rm -f ccmake cmake-gui cpack
    - cd $HOME
    - cmake --version
    - rm -f /usr/local/games/cmake-3.22.1-linux-x86_64.tar.gz
    # }}}
    # {{{ mpich
    - cd /usr/local/games
    - tar xf /usr/local/games/mpich-3.1.4.tar.gz
    - cd mpich-3.1.4/
    - ./configure --prefix=/usr --enable-fortran=no &> /dev/null
    - make -j install &> /dev/null
    - cd ..
    - rm -fr mpich-3.1.4
    - ldconfig
    - cd $HOME
    - mpicxx --version
    - rm -f /usr/local/games/mpich-3.1.4.tar.gz
    # }}}
    # {{{ googletest:
    - cd /usr/local/games
    - tar xf /usr/local/games/release-1.11.0.tar.gz
    - rm -f /usr/local/games/release-1.11.0.tar.gz
    # }}}
    # {{{ reframe:
    - python3 -m pip install -U pip > /dev/null
    - python3 -m pip install setuptools requests ReFrame-HPC > /dev/null
    - reframe --version
    # }}}
    # {{{ thrust:
    - apt install -y --no-install-recommends cuda-thrust-11-3 > /dev/null
    # }}}
# }}}
# {{{ deps-ubu-gnu_fake
.deps-ubu-gnu_fake: &deps-ubu-gnu_fake
  # tag must be 'docker_jfrog'
  # tags:
  #   - docker_jfrog
  before_script:
    - echo CI_PROJECT_DIR=$CI_PROJECT_DIR PWD=$PWD
# }}}
# }}}

# {{{ build: -DCMAKE_BUILD_TYPE=Release
.build: &build
  # tag must be 'docker_jfrog'
  # tags:
  #   - docker_jfrog
  before_script:
    # {{{ NOTE: for cpe only
    - if [ "$cpe" = "true" ] ;then
        echo "cpe=$cpe pe=$pe";
        export PATH="$NVIDIA_PATH/cuda/bin:$NVIDIA_PATH/compilers/bin:$PATH";
      fi
    - export PATH="$NVIDIA_PATH/cuda/bin:$NVIDIA_PATH/compilers/bin:$PATH"
    # }}}
    - echo CI_PROJECT_DIR=$CI_PROJECT_DIR
    - cd $CI_PROJECT_DIR
    # - ls -la
    - sed -i "s@GIT_REPOSITORY@URL /usr/local/games/googletest-release-1.11.0/\n#@" ./domain/test/CMakeLists.txt.in
    - sed -i 's@GIT_TAG@#GIT_TAG @' ./domain/test/CMakeLists.txt.in
    # - cat ./domain/test/CMakeLists.txt.in
    - echo "cpe=$cpe pe=$pe"
    - if [ "$cpe" = "true" ]; then
        cpe_cmake_flags="-DCMAKE_CXX_COMPILER=CC -DCMAKE_CUDA_COMPILER=nvcc -DCMAKE_CUDA_FLAGS=-L$NVIDIA_PATH/cuda/lib64";
        echo "cpe_cmake_flags=$cpe_cmake_flags NVIDIA_PATH=$NVIDIA_PATH";
        if [ "$pe" = "gnu" ]; then
          module swap PrgEnv-cray PrgEnv-gnu;
          module list;
          CC --version;
        fi;
      fi
    # - echo "$PATH" | tr ':' '\n' | sort
    - nvcc --version
    - cmake -S . -B build -DCMAKE_CXX_FLAGS=-w $cpe_cmake_flags -DCMAKE_BUILD_TYPE=Release -DBUILD_RYOANJI=ON
    - cd build/
    # {{{ debug with:
    # - make -j3 coordinate_test domain_2ranks
    # - mkdir -p /usr/local/sbin/coord_samples
    # - cp domain/test/coord_samples/coordinate_test /usr/local/sbin/coord_samples/coordinate_test
    # - mkdir -p /usr/local/sbin/integration_mpi
    # - cp `find . -name domain_2ranks` /usr/local/sbin/integration_mpi/domain_2ranks
    # }}}
    - make help
    # - make -j3 all
    - make -j `grep processor /proc/cpuinfo | wc -l` install
    - which sedov
# }}}

# {{{ build-debug: -DCMAKE_BUILD_TYPE=Debug
.build-debug: &build-debug
  before_script:
    # {{{ NOTE: for cpe only
    - if [ "$cpe" = "true" ] ;then
        echo "cpe=$cpe pe=$pe";
        export PATH="$NVIDIA_PATH/cuda/bin:$NVIDIA_PATH/compilers/bin:$PATH";
      fi
    - export PATH="$NVIDIA_PATH/cuda/bin:$NVIDIA_PATH/compilers/bin:$PATH"
    # }}}
    - echo CI_PROJECT_DIR=$CI_PROJECT_DIR
    - cd $CI_PROJECT_DIR
    - sed -i "s@GIT_REPOSITORY@URL /usr/local/games/googletest-release-1.11.0/\n#@" ./domain/test/CMakeLists.txt.in
    - sed -i 's@GIT_TAG@#GIT_TAG @' ./domain/test/CMakeLists.txt.in
    # - cat ./domain/test/CMakeLists.txt.in
    - echo "cpe=$cpe pe=$pe"
    - if [ "$cpe" = "true" ]; then
        cpe_cmake_flags="-DCMAKE_CXX_COMPILER=CC -DCMAKE_CUDA_COMPILER=nvcc -DCMAKE_CUDA_FLAGS=-L$NVIDIA_PATH/cuda/lib64";
        echo "cpe_cmake_flags=$cpe_cmake_flags NVIDIA_PATH=$NVIDIA_PATH";
        if [ "$pe" = "gnu" ]; then
          module swap PrgEnv-cray PrgEnv-gnu;
          module list;
          CC --version;
        fi;
      fi
    # - echo "$PATH" | tr ':' '\n' | sort
    - nvcc --version
    - cmake -S . -B build -DCMAKE_CXX_FLAGS=-w $cpe_cmake_flags -DCMAKE_BUILD_TYPE=Debug -DBUILD_RYOANJI=ON
    - cd build/
    # {{{ debug with:
    # - make -j3 coordinate_test domain_2ranks
    # - mkdir -p /usr/local/sbin/coord_samples
    # - cp domain/test/coord_samples/coordinate_test /usr/local/sbin/coord_samples/coordinate_test
    # - mkdir -p /usr/local/sbin/integration_mpi
    # - cp `find . -name domain_2ranks` /usr/local/sbin/integration_mpi/domain_2ranks
    # }}}
    - make help
    # - make -j3 all
    - make -j `grep processor /proc/cpuinfo | wc -l` install
    - which sedov
# }}}

# {{{ run/1
.run-1: &run-1
  extends: .dom
  # tags is set in .dom
  # tags: ['dom-container']
  # image: art.cscs.ch/contbuild/testing/anfink/sph-exa_gnu:1.0
  before_script:
    - echo "cpe=$cpe pe=$pe";
    # {{{ cpe:
    - if [ "$cpe" = "true" ]; then
        if [ "$pe" = "gnu" ]; then
          source /etc/bash.bashrc.local;
          module swap PrgEnv-cray PrgEnv-gnu;
          module load gcc;
          export NVIDIA_PATH=/opt/nvidia/Linux_x86_64/21.9;
          export LD_LIBRARY_PATH=$NVIDIA_PATH/cuda/11.4/targets/x86_64-linux/lib:$LD_LIBRARY_PATH;
        fi;
        if [ "$jg" = "cce" ]; then
          source /etc/bash.bashrc.local;
          module load cce;
          export NVIDIA_PATH=/opt/nvidia/Linux_x86_64/21.9;
          export LD_LIBRARY_PATH=$NVIDIA_PATH/cuda/11.4/targets/x86_64-linux/lib:$LD_LIBRARY_PATH;
        fi;
      fi
    # }}}
    # unittests -n1
    - /usr/local/sbin/unit/component_units
    - /usr/local/sbin/unit/component_units_omp
    - /usr/local/sbin/coord_samples/coordinate_test
    # perf_unittests -n1
    - /usr/local/sbin/performance/octree_perf
    - /usr/local/sbin/performance/peers_perf
    - /usr/local/sbin/performance/scan_perf
    - /usr/local/sbin/performance/hilbert_perf
    - /usr/local/sbin/performance/gravity_perf
    # TODO: - /usr/local/bin/kernel/kernel_tests
    # NOTE:gfetch - kernel_tests
    # - /kernel/kernel_tests
# }}}

# {{{ run/2
.run-2: &run-2
  extends: .dom
  # tags is set in .dom
  # tags: ['dom-container']
  # image: art.cscs.ch/contbuild/testing/anfink/sph-exa_gnu:1.0
  before_script:
    - /usr/local/sbin/integration_mpi/domain_2ranks
    - /usr/local/sbin/integration_mpi/exchange_focus
    - /usr/local/sbin/integration_mpi/exchange_halos
    - /usr/local/sbin/integration_mpi/globaloctree
# }}}

# {{{ run/10
.run-10: &run-10
  extends: .dom
  # tags is set in .dom
  # tags: ['dom-container']
  # image: art.cscs.ch/contbuild/testing/anfink/sph-exa_gnu:1.0
  before_script:
    # mpi_unittests -n12 (or -n1 if cpe)
    - echo "cpe=$cpe pe=$pe";
    # {{{ cpe
    - if [ "$cpe" = "true" ]; then
        if [ "$pe" = "gnu" ]; then
          source /etc/bash.bashrc.local;
          module swap PrgEnv-cray PrgEnv-gnu;
          module load gcc;
          export NVIDIA_PATH=/opt/nvidia/Linux_x86_64/21.9;
          export LD_LIBRARY_PATH=$NVIDIA_PATH/cuda/11.4/targets/x86_64-linux/lib:$LD_LIBRARY_PATH;
        fi;
        if [ "$jg" = "cce" ]; then
          source /etc/bash.bashrc.local;
          module load cce;
          export NVIDIA_PATH=/opt/nvidia/Linux_x86_64/21.9;
          export LD_LIBRARY_PATH=$NVIDIA_PATH/cuda/11.4/targets/x86_64-linux/lib:$LD_LIBRARY_PATH;
        fi;
      fi
    # }}}
    - export OMP_NUM_THREADS=2
    - if [ "$cpe" = "true" ]; then
        echo "/usr/local/sbin/integration_mpi/exchange_domain skipped because cpe=$cpe";
        echo "/usr/local/sbin/integration_mpi/domain_nranks skipped because cpe=$cpe";
        echo "/usr/local/bin/evrard skipped";
      else
        /usr/local/sbin/integration_mpi/exchange_domain;
        /usr/local/sbin/integration_mpi/domain_nranks;
        wget --quiet $JG_DEPS_PATH/in/Test3DEvrardRel.bin;
        /usr/local/bin/evrard -s 0 --input ./Test3DEvrardRel.bin ;
      fi
    - /usr/local/sbin/integration_mpi/treedomain
    - /usr/local/sbin/integration_mpi/focus_tree
    - /usr/local/sbin/integration_mpi/box_mpi
    - /usr/local/sbin/integration_mpi/exchange_keys
    # tests -n12 (or -n1 if cpe)
    - /usr/local/bin/sedov -s 0 -n 40
# }}}

# {{{ run/gpu
.run-p100: &run-p100
  extends: .dom
  # tags is set in .dom
  # tags: ['dom-container']
  # image: art.cscs.ch/contbuild/testing/anfink/sph-exa_gnu:1.0
  before_script:
    - echo "cpe=$cpe pe=$pe";
    # {{{ cpe
    - if [ "$cpe" = "true" ]; then
        if [ "$pe" = "gnu" ]; then
          source /etc/bash.bashrc.local;
          module swap PrgEnv-cray PrgEnv-gnu;
          module load gcc;
          export NVIDIA_PATH=/opt/nvidia/Linux_x86_64/21.9;
          export LD_LIBRARY_PATH=$NVIDIA_PATH/cuda/11.4/targets/x86_64-linux/lib:$LD_LIBRARY_PATH;
        fi;
        if [ "$jg" = "cce" ]; then
          source /etc/bash.bashrc.local;
          module load cce;
          export NVIDIA_PATH=/opt/nvidia/Linux_x86_64/21.9;
          export LD_LIBRARY_PATH=$NVIDIA_PATH/cuda/11.4/targets/x86_64-linux/lib:$LD_LIBRARY_PATH;
        fi;
      fi
    # }}}
    # gpu_tests -n1
    - /usr/local/bin/sedov-cuda -s 0 -n 50
    # gpu_unittests -n1
    - /usr/local/sbin/ryoanji/unit_tests/ryoanji_unit_tests
    - /usr/local/sbin/unit_cuda/component_units_cuda
    - /usr/local/sbin/performance/cudaNeighborsTest
    - /usr/local/sbin/performance/octree_perf_gpu
    - /usr/local/sbin/performance/hilbert_perf_gpu
# }}}
